{
	Tools = ordered() {
		Text1 = TextPlus {
			CtrlWZoom = false,
			Inputs = {
				GlobalOut = Input { Value = 5577, },
				Width = Input { Value = 3840, },
				Height = Input { Value = 2160, },
				UseFrameFormatSettings = Input { Value = 1, },
				["Gamut.SLogVersion"] = Input { Value = FuID { "SLog2" }, },
				Center = Input { Value = { 0.473039215686274, 0.21656976744186 }, },
				LayoutRotation = Input { Value = 1, },
				TransformRotation = Input { Value = 1, },
				Softness1 = Input { Value = 1, },
				StyledText = Input {
					SourceOp = "TimeCode1",
					Source = "Time",
					Expression = "Text(\"No GPS data loaded\")",
				},
				Font = Input { Value = "Open Sans", },
				Style = Input { Value = "Bold", },
				VerticalJustificationNew = Input { Value = 3, },
				HorizontalJustificationNew = Input { Value = 3, },
				TabSpacing = Input { Value = 1, },
				FrameRenderScript = Input { Value = "-- Select gps data matching this frame\ni=math.floor( time*gpsRate )\nspeed=0\nif( i < #gpsSpeed3d ) then\n    speed = gpsSpeed3d[i]\nend\nif( i < #gpsAltitude ) then\n    altitude = gpsAltitude[i]\nend\n-- Format the data\nspeed_ms = string.format(\"%5.1f\", speed) \nspeed_kmh = string.format(\"%5.1f\", speed*3.6) \naltitude_m = string.format(\"%5.f\", altitude)\n\nself.StyledText=Text(speed_ms .. \" m/s (\" .. speed_kmh .. \" km/h) \" .. altitude_m .. \" mÃ¶h\"  )", },
				StartRenderScripts = Input { Value = 1, },
				StartRenderScript = Input { Value = "print(\"GPS loading started\")\nmediaprops = MediaIn1:GetData('MediaProps')\nlocal mediaPath = tostring(mediaprops.MEDIA_PATH)\nprint(mediaPath)\npath = mediaPath..\".track\"\ngpsSamples = 0\n-- Try to open track, if dosen't exist, create it using exiftool and try to open it again\nfile, err = io.open(path, \"r\")\nif not file then 	\n	command = \"exiftool -ee3 \\\"\" .. mediaPath .. \"\\\" > \\\"\"  .. path .. \"\\\"\"\n	print( \"Extracting gps data: \" .. command )\n	os.execute( command )	\n	file, err = io.open(path , \"r\")\nend\nif not file then\n	print(\"Error using exiftool to create the file \" .. path )    \nelse\n	-- Load the gps data (track file)    \n	gpsSpeed3d = {}\n    gpsAltitude = {}\n	-- Pattern to match lines containing \"GPS Speed 3D : <number>\"\n	local patternSpeed3d  = \"GPS%s+Speed%s+3D%s+:%s+([%-%d%.?%d*]+)\"\n	local patternAltitude =   \"GPS%s+Altitude%s+:%s+([%-%d%.?%d*]+)\"\n	\n    for line in file:lines() do\n		-- Extract the number where it matches the pattern\n		local number = line:match(patternSpeed3d)\n		if number then			\n			table.insert(gpsSpeed3d, tonumber(number))			\n        else\n            number = line:match(patternAltitude)\n            if number then                \n                table.insert(gpsAltitude, tonumber(number))\n				gpsSamples = gpsSamples + 1\n            end\n        end\n	end\n\n	file:close()\nend\n-- Calculate the number of gps samples per frame\ngpsRate = #gpsSpeed3d / mediaprops.MEDIA_NUM_FRAMES\nprint(\"Laded \" .. gpsSamples .. \" GPS samples\")", },
				EndRenderScripts = Input { Value = 1, },
			},
			ViewInfo = OperatorInfo { Pos = { 55, 82.5 } },
		},
		TimeCode1 = TimeCode {
			CtrlWZoom = false,
			Inputs = {
				FramesPerSecond = Input { Value = 60, },
			},
		}
	}
}